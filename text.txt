import React, { useEffect, useState } from 'react';
import {
  Box, Card, CardContent, CardActions,
  Typography, Button, Grid, InputBase,
  Paper, Dialog, DialogActions, DialogContent,
  DialogContentText, DialogTitle, Snackbar
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import SearchIcon from '@mui/icons-material/Search';
import GroupForm from '../components/GroupForm';
import { getMyGroups, deleteGroup } from '../Services/GroupServices';
import { updateGroup } from '../Services/GroupServices';
import TextField from '@mui/material/TextField';
import { useNavigate } from 'react-router-dom';
import Tooltip from '@mui/material/Tooltip';
import Fab from '@mui/material/Fab';


const MyGroups = () => {
  const [groups, setGroups] = useState([]);
  const [filteredGroups, setFilteredGroups] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [openForm, setOpenForm] = useState(false);
  const [selectedGroupId, setSelectedGroupId] = useState(null);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [deleteTargetId, setDeleteTargetId] = useState(null);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [editGroupData, setEditGroupData] = useState({ name: '' });
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const navigate = useNavigate();




  useEffect(() => {
    fetchGroups();
  }, []);

  const fetchGroups = async () => {
    const res = await getMyGroups();
    if (Array.isArray(res)) {
      setGroups(res);
      setFilteredGroups(res);
    } else {
      console.error('Response does not contain an array');
    }
  };

  const handleSearch = (e) => {
    const term = e.target.value;
    setSearchTerm(term);
    const filtered = groups.filter((group) =>
      group.name.toLowerCase().includes(term.toLowerCase())
    );
    setFilteredGroups(filtered);
  };

  const handleDelete = async () => {
    if (deleteTargetId) {
      await deleteGroup(deleteTargetId);
      fetchGroups();
      setSnackbarOpen(true);
      setOpenDeleteDialog(false);
      setDeleteTargetId(null);
    }
  };

  const handleEditClick = (group) => {
    setEditGroupData({ _id: group._id, name: group.name });
    setEditDialogOpen(true);
  };

  const handleEditSave = async () => {
    const trimmedName = editGroupData.name.trim().toLowerCase();

    const isDuplicate = groups.some(
      (g) =>
        g._id !== editGroupData._id &&
        g.name.trim().toLowerCase() === trimmedName
    );

    if (isDuplicate) {
      setSnackbarMessage('Group name already exists');
      setSnackbarOpen(true);
      return;
    }

    try {
      const updatedGroup = await updateGroup(editGroupData._id, {
        groupName: editGroupData.name,
      });

      // 🔁 Update groups state locally without full refetch
      setGroups((prevGroups) =>
        prevGroups.map((group) =>
          group._id === editGroupData._id
            ? { ...group, name: editGroupData.name }
            : group
        )
      );

      setFilteredGroups((prevFiltered) =>
        prevFiltered.map((group) =>
          group._id === editGroupData._id
            ? { ...group, name: editGroupData.name }
            : group
        )
      );


      setEditDialogOpen(false);
      setSnackbarMessage('Group name updated successfully');
      setSnackbarOpen(true);
    } catch (err) {
      console.error('Error updating group:', err);
      setSnackbarMessage('Error updating group');
      setSnackbarOpen(true);
    }
  };

  const handleToggle = () => {
  setSelectedGroupId(null);
  setOpenForm(true);
};






  return (
    <Box p={3}>
      <Typography variant="h4" gutterBottom>
        My Groups
      </Typography>

      {/* Search & Add */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Paper component="form" sx={{ display: 'flex', alignItems: 'center', width: 400 }}>
          <SearchIcon sx={{ p: 1 }} />
          <InputBase
            sx={{ ml: 1, flex: 1 }}
            placeholder="Search Groups"
            value={searchTerm}
            onChange={handleSearch}
          />
        </Paper>

        
      </Box>

      {/* Groups Grid */}
      <Grid container spacing={2}>
        {filteredGroups.map((group, index) => (
          <Grid item xs={12} sm={6} md={4} key={group._id || index}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="h6">{group.name}</Typography>
                <Typography color="text.secondary">Tasks: {group.tasks?.length ?? 0}</Typography>
                <Typography color="text.secondary">Members: {group.members?.length ?? 0}</Typography>
              </CardContent>
              <CardActions>
                <Button size="small" onClick={()=>navigate('/viewgroup')}>
                  View
                </Button>
                <Button size="small" onClick={() => handleEditClick(group)}>
                  Edit
                </Button>

                <Button
                  size="small"
                  color="error"
                  onClick={() => {
                    setDeleteTargetId(group._id);
                    setOpenDeleteDialog(true);
                  }}
                >
                  Delete
                </Button>
              </CardActions>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Group Form Dialog */}
      <GroupForm
        open={openForm}
        handleClose={() => {
          setOpenForm(false);
          fetchGroups();
        }}
        groupId={selectedGroupId}
      />

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={openDeleteDialog}
        onClose={() => setOpenDeleteDialog(false)}
      >
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this group? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDeleteDialog(false)}>Cancel</Button>
          <Button onClick={handleDelete} color="error">
            Delete
          </Button>
        </DialogActions>
      </Dialog>

      {/* Edit Dialog */}
      <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)}>
        <DialogTitle>Edit Group</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            fullWidth
            label="Group Name"
            variant="standard"
            value={editGroupData.name}
            onChange={(e) =>
              setEditGroupData({ ...editGroupData, name: e.target.value })
            }
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleEditSave}>Save</Button>
        </DialogActions>
      </Dialog>


      {/* Snackbar Notification */}
      <Snackbar
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
      />

      <Tooltip title="Add Group" placement="top">
      <Fab
        color="secondary"
        aria-label="add"
        onClick={handleToggle}
        sx={{
          position: 'fixed',
          bottom: 20,
          right: 20,
          zIndex: 1000
        }}
      >
        <AddIcon />
      </Fab>
    </Tooltip>
    </Box>
    
  );
};

export default MyGroups;
